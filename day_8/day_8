#duck_typing
# class Duck:
#     def sound(self):
#         return "Quack, Quack!"
    
# class AnotherBird:
#     def sound(self):
#         return "I am similar to a duck "

# def makesound(duck):
#     print(duck.sound())  

# duck=Duck()
# anotherbird= AnotherBird() 

# makesound(duck)
# makesound(anotherbird)



#overriding 
# from abc import ABC, abstractmethod
# class shape(ABC):
#     @abstractmethod
#     def draw(self):
#         "Abstract method"
#         return 
# class circle(shape):
#     def draw(self):
#         super().draw()
#         print("Draw a circle")
#         return 
# class rectangle(shape):
#     def draw(self):
#         super().draw()
#         print("draw a rectangle")
#         return 
# shapes= [circle(),rectangle()]
# for shp in shapes:
#     shp.draw()   

#overloading
# class vector: 
#     def __init__(self, a,b):
#         self.a=b
#         self.b=b
#     def __str__(self):
#         return 'vector (%d, %d)' %(self.a, self.b)
    
#     def __add__(self,other):
#         return  vector(self.a + other.a, self.b + other.b)

# v1=vector(2,10)
# v2=vector(5,-2)
# print(v1+v2)

#method_overloading
# def add(*nums):
#     return sum(nums)

# result1=add(10,25)
# result2=add(10,25,35)

# print(result1)
# print(result2)